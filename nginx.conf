# Production-optimized Nginx Configuration for Dino Frontend



events {

  worker_connections 1024;

  use epoll;

  multi_accept on;

}



http {

  include /etc/nginx/mime.types;

  default_type application/octet-stream;



  # Enhanced logging for debugging

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '

          '$status $body_bytes_sent "$http_referer" '

          '"$http_user_agent" "$http_x_forwarded_for"';

   

  log_format proxy '$remote_addr - $remote_user [$time_local] "$request" '

           '$status $body_bytes_sent "$http_referer" '

           '"$http_user_agent" "PROXY: $upstream_addr" "$upstream_status"';



  access_log /var/log/nginx/access.log main;

  error_log /var/log/nginx/error.log info;



  # Performance optimizations

  sendfile on;

  tcp_nopush on;

  tcp_nodelay on;

  keepalive_timeout 65;

  types_hash_max_size 2048;

  client_max_body_size 10M;



  # Gzip compression

  gzip on;

  gzip_vary on;

  gzip_min_length 1024;

  gzip_proxied any;

  gzip_comp_level 6;

  gzip_types

    text/plain

    text/css

    text/xml

    text/javascript

    application/json

    application/javascript

    application/xml+rss

    application/atom+xml

    image/svg+xml;



  server {

    listen 8080;

    server_name _;

    root /usr/share/nginx/html;

    index index.html;



    # Security headers

    add_header X-Frame-Options DENY always;

    add_header X-Content-Type-Options nosniff always;

    add_header X-XSS-Protection "1; mode=block" always;

    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: wss:;" always;



    # Cache static assets

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {

      expires 1y;

      add_header Cache-Control "public, immutable";

      add_header X-Content-Type-Options nosniff;

    }



    # Cache HTML with shorter expiry

    location ~* \.html$ {

      expires 1h;

      add_header Cache-Control "public, must-revalidate";

    }



    # Health check endpoint

    location /health {

      access_log off;

      return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';

      add_header Content-Type application/json;

    }



    # Runtime configuration endpoint

    location /config.js {

      expires 1m;

      add_header Cache-Control "public, must-revalidate";

      add_header Content-Type application/javascript;

    }



    # Debug endpoint

    location /nginx-debug {

      return 200 'Nginx is working. Backend: https://dino-backend-api-867506203789.us-central1.run. app';

      add_header Content-Type text/plain;

    }



    # API proxy to backend - THIS IS THE CRITICAL FIX

    location /api/ {

      # Handle CORS preflight requests

      if ($request_method = 'OPTIONS') {

        add_header Access-Control-Allow-Origin $http_origin always;

        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;

        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;

        add_header Access-Control-Allow-Credentials true always;

        add_header Access-Control-Max-Age 86400 always;

        add_header Content-Length 0;

        add_header Content-Type text/plain;

        return 204;

      }



      # Enhanced logging for API requests

      access_log /var/log/nginx/access.log proxy;

       

      # Forward to backend - CRITICAL: This must proxy, not serve files

      proxy_pass https://dino-backend-api-867506203789.us-central1.run.app/;

       

      # Essential proxy headers

      proxy_set_header Host $host;

      proxy_set_header X-Real-IP $remote_addr;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header X-Forwarded-Host $host;

      proxy_set_header X-Forwarded-Port $server_port;

       

      # Timeouts

      proxy_connect_timeout 30s;

      proxy_send_timeout 30s;

      proxy_read_timeout 30s;

       

      # CORS headers for API responses

      add_header Access-Control-Allow-Origin $http_origin always;

      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;

      add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, X-Requested-With" always;

      add_header Access-Control-Allow-Credentials true always;

       

      # Debug header to show what backend we're using

      add_header X-Proxy-Backend "dino-backend-api-867506203789.us-central1.run.app" always;

       

      # Disable buffering for real-time responses

      proxy_buffering off;

      proxy_cache off;

    }



    # WebSocket proxy - FIXED

    location /ws/ {

      # Forward WebSocket requests to backend

      proxy_pass https://dino-backend-api-867506203789.us-central1.run.app/;

       

      # WebSocket specific headers

      proxy_http_version 1.1;

      proxy_set_header Upgrade $http_upgrade;

      proxy_set_header Connection "upgrade";

       

      # Standard proxy headers

      proxy_set_header Host $host;

      proxy_set_header X-Real-IP $remote_addr;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header X-Forwarded-Host $host;

      proxy_set_header X-Forwarded-Port $server_port;

       

      # WebSocket timeouts

      proxy_connect_timeout 30s;

      proxy_send_timeout 30s;

      proxy_read_timeout 300s;

       

      # Disable buffering for WebSocket

      proxy_buffering off;

      proxy_cache off;

    }



    # Error pages

    location = /50x.html {

      root /usr/share/nginx/html;

      internal;

    }



    # Handle React Router (SPA) - This should be last

    location / {

      try_files $uri $uri/ /index.html;

    }



    # Deny access to hidden files

    location ~ /\. {

      deny all;

      access_log off;

      log_not_found off;

    }

  }

}