# Production-optimized Cloud Build configuration for Dino Frontend
steps:
  # Build the container image with production optimizations
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '--build-arg', 'NODE_ENV=production',
      '--build-arg', 'REACT_APP_ENV=production',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/dino-repo/dino-frontend:$BUILD_ID',
      '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/dino-repo/dino-frontend:latest',
      '.'
    ]

  # Push the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push', 
      'us-central1-docker.pkg.dev/$PROJECT_ID/dino-repo/dino-frontend:$BUILD_ID'
    ]

  # Deploy to Cloud Run with production configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'dino-frontend',
      '--image', 'us-central1-docker.pkg.dev/$PROJECT_ID/dino-repo/dino-frontend:$BUILD_ID',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '512Mi',
      '--cpu', '1',
      '--port', '8080',
      '--max-instances', '10',
      '--concurrency', '80',
      '--timeout', '300',
      '--set-env-vars', 
        'APP_ENV=production,BACKEND_URL=https://dino-backend-api-867506203789.us-central1.run.app,API_BASE_URL=/api/v1,WS_URL=/ws,LOG_LEVEL=warn,ENABLE_CONSOLE_LOGGING=false,DEBUG_MODE=false'
    ]

# Images to be pushed to registry
images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/dino-repo/dino-frontend:$BUILD_ID'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/dino-repo/dino-frontend:latest'

# Build options for optimization
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '100'
  logging: 'CLOUD_LOGGING_ONLY'